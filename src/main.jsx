import * as React from 'react';
import './main.scss';
import filter from './icons/filter.svg';
import hub from './icons/hub.svg';
import data from './vulnerability-data.json';
import BarChart from './charts/BarChart';
import CompactList from './lib/CompactList';
import Modal from './lib/Modal';
import HostList from './lib/HostList';
import {
	lowFloor,
	lowCeiling,
	mediumFloor,
	mediumCeiling,
	highFloor,
	highCeiling,
	criticalFloor,
	riskType,
} from './lib/Common';

const Main = () => {
	const cveArray = Object.keys(data).map(key => data[key]);
	const [populateDenseModal, setPopulateDenseModal] = React.useState([]);
	const [showDenseModal, setShowDenseModal] = React.useState(false);
	const [populateCompactModal, setPopulateCompactModal] = React.useState([]);
	const [showCompactModal, setShowCompactModal] = React.useState(false);
	const [sort, setSort] = React.useState(true);
	const [sortType, setSortType] = React.useState('risk');
	const [workingObject, setWorkingObject] = React.useState({});
	const [workingRequest, setWorkingRequest] = React.useState();
	const riskMap = {
		low: {
			effectedHosts: [],
			commonHosts: [],
			items: [],
		},
		medium: {
			effectedHosts: [],
			commonHosts: [],
			items: [],
		},
		high: {
			effectedHosts: [],
			commonHosts: [],
			items: [],
		},
		critical: {
			effectedHosts: [],
			commonHosts: [],
			items: [],
		},
	};

	// in order to dynamically populate the map with an
	// unknown number of identification types (CVE/DSS), 
	// this is not typed ahead
	const identificationMap = {};

	// seeing how many common hosts are being effected at each level
	// could lead to seeing interesting trends
	const getCommonHosts = (level) => {
		let tempLevel;

		switch (level) {
			case 'critical':
				tempLevel = riskMap.critical.effectedHosts
				break;
			case 'high':
				tempLevel = riskMap.high.effectedHosts
				break;
			case 'medium':
				tempLevel = riskMap.medium.effectedHosts
				break;
			case 'low':
				tempLevel = riskMap.low.effectedHosts
				break;
		}

		return tempLevel.filter((item, index) => index !== tempLevel.indexOf(item));
	}

	// sorted by risk factor overall
	// group CVEs by level (most common view)
	cveArray.sort((a, b) => a.risk > b.risk ? -1 : 1).map(
		item => {
			if (item.risk >= lowFloor && item.risk < lowCeiling) {
				riskMap.low.effectedHosts.push(...item.hosts);
				riskMap.low.items.push(item);
			} else if (item.risk > mediumFloor && item.risk < mediumCeiling) {
				riskMap.medium.effectedHosts.push(...item.hosts);
				riskMap.medium.items.push(item);
			} else if (item.risk > highFloor && item.risk < highCeiling) {
				riskMap.high.effectedHosts.push(...item.hosts);
				riskMap.high.items.push(item);
			} else if (item.risk > criticalFloor) {
				riskMap.critical.effectedHosts.push(...item.hosts);
				riskMap.critical.items.push(item);
			}
		}
	);

	// now that we have all the hosts for each level,
	// lets get hosts that share vulnerabilities
	riskMap.low.commonHosts = getCommonHosts('low');
	riskMap.medium.commonHosts = getCommonHosts('medium');
	riskMap.high.commonHosts = getCommonHosts('high');
	riskMap.critical.commonHosts = getCommonHosts('critical');

	// by identification (Year/CVE/DSS)
	// get all possibilities
	let identificationType = [];
	cveArray.sort((a, b) => a.identifier > b.identifier ? -1 : 1).map(
		item => {
			const parsedYear = item.identifier.slice(0, 8);
			if (!identificationType.includes(parsedYear)) {
				identificationType.push(parsedYear);
			}
		}
	);

	// do the actual sorting
	const sortYears = (key) => {
		let array = [];

		cveArray.map(item => {
			if (item.identifier.slice(0, 8) === key) {
				array.push(item);
			}
		});
		return array;
	}

	const getIdentificationCommonHosts = (hosts) => {
		return hosts.filter((item, index) => index !== hosts.indexOf(item));
	}

	// putting the items in their correct dynamic slots
	const fillIdentificationMap = () => {
		for (let i = 0; i < identificationType.length; i++) {
			const sorted = sortYears(identificationType[i]).sort((a, b) => a.risk > b.risk ? -1 : 1);
			const effectedHosts = [];

			sorted.map(item => effectedHosts.push(...item.hosts));

			const obj = Object.assign({}, {
				items: sorted,
				effectedHosts: effectedHosts,
				commonHosts: getIdentificationCommonHosts(effectedHosts),
			});

			identificationMap[identificationType[i]] = obj;

		}
	}

	fillIdentificationMap();

	// handle any click and populate the correct modal
	const handleTotalClick = (result, request) => {
		setWorkingObject(result);
		setWorkingRequest(request);
	};

	const sortRisk = () => {
		setSort(!sort);
		setSortType('risk');
		!sort
			? workingObject.items.sort((a, b) => a.risk > b.risk ? -1 : 1)
			: workingObject.items.sort((a, b) => a.risk > b.risk ? 1 : -1);
	}

	const sortTitle = () => {
		setSort(!sort);
		setSortType('identifier');
		!sort
			? workingObject.items.sort((a, b) => a.identifier > b.identifier ? -1 : 1)
			: workingObject.items.sort((a, b) => a.identifier > b.identifier ? 1 : -1);
	}

	const getTitle = () => {
		return sortType === 'risk'
			? (sort ?  'High to low' : 'Low to high')
			: (sort ?  `Z to A`: 'A to Z')
	}

	React.useEffect(() => populateProper(), [workingObject])

	// populate based on filters
	const populateProper = () => {
		switch (workingRequest) {
			case 'total':
				setPopulateDenseModal(workingObject.items);
				setShowDenseModal(true);
				break;
			case 'hosts':
				setPopulateCompactModal(workingObject.effectedHosts);
				setShowCompactModal(true);
				break;
			case 'common':
				setPopulateCompactModal(workingObject.commonHosts);
				setShowCompactModal(true);
				break;
		}
	};

	const MetricList = ({ title, type }) => {
		const result = type === 'identificationMap' ? identificationMap[title] : riskMap[title];
		return (
			<ul className='metrics-list'>
				<li onClick={() => handleTotalClick(result, 'total')}>
					<p>total</p>
					<span>{result.items.length}</span>
				</li>
				<li onClick={() => handleTotalClick(result, 'hosts')}>
					<p>effected hosts</p>
					<span>{result.effectedHosts.length.toLocaleString("en-US")}</span>
				</li>
				<li onClick={() => handleTotalClick(result, 'common')}>
					<p>effected hosts in common</p>
					<span>{result.commonHosts.length.toLocaleString("en-US")}</span>
				</li>
			</ul>
		)
	};

	const simpleTotalBarData = [
		{
			riskLevel: 'low',
			total: riskMap.low.items.length,
		},
		{
			riskLevel: 'medium',
			total: riskMap.medium.items.length,
		},
		{
			riskLevel: 'high',
			total: riskMap.high.items.length,
		},
		{
			riskLevel: 'critical',
			total: riskMap.critical.items.length,
		}
	];

	console.log('----------------------------------');
	console.log('Risk Mapping: ', riskMap);
	console.log('----------------------------------');
	console.log('Identification Mapping: ', identificationMap);
	console.log('----------------------------------');
	console.log('Requesting ', workingRequest, ' from: ', workingObject);

	return (
		<div className='main'>
			<Modal show={showDenseModal} onClose={() => setShowDenseModal(false)}>
				<div className='sort-list'>
					<button className={sortType === 'risk' ? 'active' : ''} onClick={sortRisk}>toggle risk</button>
					<button className={sortType === 'identifier' ? 'active' : ''} onClick={sortTitle}>toggle name</button>
				</div>
				<h2>{getTitle()}</h2>
				<CompactList items={populateDenseModal} />
			</Modal>
			<Modal show={showCompactModal} onClose={() => setShowCompactModal(false)}>
				<HostList items={populateCompactModal} />
			</Modal>
			<header className='topbar'>
				<img src={filter} alt='filter' />
			</header>
			<main className='page'>
				<section className='welcome'>
					<div className='welcome-wrapper'>
						<img src={hub} alt='hub' />
						<h1>CVE Data Hub</h1>
						<p>Introduction content to come soon...</p>
					</div>
				</section>
				<section className='overview'>
					<h2>Overview</h2>
					<div className='overview-metrics-wrapper'>
						{riskType.map((title, index) => (
							<div className={`metric-block ${title}`} key={index}>
								<h3>{title}</h3>
								<MetricList title={title} type='riskMap' />
							</div>
						))
						}
					</div>
					<div className='overview-barchart-wrapper'>
						<div>
							<BarChart data={simpleTotalBarData} />
						</div>
					</div>
				</section>
				<section className='identification'>
					<h2>Identification (Year/CVE/DSS)</h2>
					<div className='identification-metrics-wrapper'>
						{identificationType.map((title, index) => (
							<div className='metric-block' key={index}>
								<h3>{title}</h3>
								<MetricList title={title} type='identificationMap' />
							</div>
						))
						}
					</div>
				</section>
				<section className='view-area'>
					<div className='view-area-wrapper'>

					</div>
				</section>
			</main>
		</div>
	);
}

export default Main;
