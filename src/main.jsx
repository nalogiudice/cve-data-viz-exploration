import * as React from 'react';
import './main.scss';
import filter from './icons/filter.svg';
import data from './vulnerability-data.json';

const Main = () => {
	const cveArray = Object.keys(data).map(key => data[key]);

	// Risk values based on CVSS v3.0 severity ratings
	// https://nvd.nist.gov/vuln-metrics/cvss#
	const
		lowFloor = 1,
		lowCeiling = 39.9999,
		mediumFloor = 40,
		mediumCeiling = 69.9999,
		highFloor = 70,
		highCeiling = 89.9999,
		criticalFloor = 90;

	const riskMap = {
		low: {
			count: 0,
			effectedHosts: 0,
			items: [],
		},
		medium: {
			count: 0,
			effectedHosts: 0,
			items: [],
		},
		high: {
			count: 0,
			effectedHosts: 0,
			items: [],
		},
		critical: {
			count: 0,
			effectedHosts: 0,
			items: [],
		},
	};

	console.log('Risk mapping: ', riskMap);

	// sorted by risk factor
	cveArray.sort((a, b) => a.risk > b.risk ? -1 : 1).map(
		item => {
			if (item.risk >= lowFloor && item.risk < lowCeiling) {
				riskMap.low.count++;
				riskMap.low.effectedHosts += item.hosts.length;
				riskMap.low.items.push(item);
			} else if (item.risk > mediumFloor && item.risk < mediumCeiling) {
				riskMap.medium.count++;
				riskMap.medium.effectedHosts += item.hosts.length;
				riskMap.medium.items.push(item);
			} else if (item.risk > highFloor && item.risk < highCeiling) {
				riskMap.high.count++;
				riskMap.high.effectedHosts += item.hosts.length;
				riskMap.high.items.push(item);
			} else if (item.risk > criticalFloor) {
				riskMap.critical.count++;
				riskMap.critical.effectedHosts += item.hosts.length;
				riskMap.critical.items.push(item);
			}
		}
	);

	// by year, based on identifier
	let years = [];
	const sortedYear = cveArray.sort((a, b) => a.identifier > b.identifier ? -1 : 1).map(
		(item, i) => {
			const parsedYear = item.identifier.slice(0, 8);

			if (!years.includes(parsedYear)) {
				years.push(parsedYear);
			}
			return item;
		}
	);

	console.log('Sorted by year: ', sortedYear);
	console.log('Years: ', years);

	
	// years have CVE-****
	const sortYears = (key) => {
		let array = [];

		cveArray.map(item => {
			if (item.identifier.slice(0, 8) === key) {
				array.push(item);
			}
		});

		return array;
	}

	let tempObj = {};

	for (let i = 0; i < years.length; i++) {
		// make an object with the proper amount of year slots
		tempObj[years[i]] = {"items": []};
	}

	console.log('tempObj: ', tempObj);

	for (let i = 0; i < years.length; i++) {
		// start here
		// console.log('sortYears: ', sortYears(years[i]))
	}

	/**
	 * MetricList
	 */
	const MetricList = React.memo(({total, hosts}) => {
		return (
			<ul className='metrics-list'>
				<li>
					<p>total</p>
					<span>{total}</span>
				</li>
				<li>
					<p>effected hosts</p>
					<span>{hosts}</span>
				</li>
			</ul>
		)
	})

	return (
		<div className='main'>
			<header className='topbar'>
				<img src={filter}alt='filter' />
			</header>
			<main>
				<h1>Vulnerabilities at a Glance...</h1>
				<section className='overview'>
					<div className='overview-metrics-wrapper'>
						<div className='metric-block low'>
							<h3>Low</h3>
							<MetricList
								total={riskMap.low.count}
								hosts={riskMap.low.effectedHosts.toLocaleString("en-US")}
							/>
						</div>
						<div className='metric-block medium'>
							<h3>Medium</h3>
							<MetricList
								total={riskMap.medium.count}
								hosts={riskMap.medium.effectedHosts.toLocaleString("en-US")}
							/>
						</div>
						<div className='metric-block high'>
							<h3>High</h3>
							<MetricList
								total={riskMap.high.count}
								hosts={riskMap.high.effectedHosts.toLocaleString("en-US")}
							/>
						</div>
						<div className='metric-block critical'>
							<h3>Critical</h3>
							<MetricList
								total={riskMap.critical.count}
								hosts={riskMap.critical.effectedHosts.toLocaleString("en-US")}
							/>
						</div>
					</div>
				</section>
			</main>
		</div>
	);
}

export default Main;
