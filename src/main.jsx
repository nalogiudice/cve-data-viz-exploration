import * as React from 'react';
import './main.scss';
import filter from './icons/filter.svg';
import hub from './icons/hub.svg';
import data from './vulnerability-data.json';
import BarChart from './barChart';

const Main = () => {
	const cveArray = Object.keys(data).map(key => data[key]);

	// Risk values based on CVSS v3.0 severity ratings
	// https://nvd.nist.gov/vuln-metrics/cvss#
	const
		lowFloor = 1,
		lowCeiling = 39.9999,
		mediumFloor = 40,
		mediumCeiling = 69.9999,
		highFloor = 70,
		highCeiling = 89.9999,
		criticalFloor = 90;

	// perhapds this should be an array of objects?
	// const test = [
	// 	{
	// 		low: {
	// 			count: 0,
	// 			effectedHosts: [],
	// 			commonHosts: [],
	// 			items: [],
	// 		}
	// 	}
	// ]

	const riskMap = {
		low: {
			count: 0,
			effectedHosts: [],
			commonHosts: [],
			items: [],
		},
		medium: {
			count: 0,
			effectedHosts: [],
			commonHosts: [],
			items: [],
		},
		high: {
			count: 0,
			effectedHosts: [],
			commonHosts: [],
			items: [],
		},
		critical: {
			count: 0,
			effectedHosts: [],
			commonHosts: [],
			items: [],
		},
	};

	// in order to dynamically populate the map with an
	// unknown number of identification types, this is not
	// typed ahead
	const identificationMap = {};

	// seeing how many common hosts are being effected at each level
	// could lead to seeing interesting trends
	const getCommonHosts = (level) => {
		let tempLevel;

		switch (level) {
			case 'critical':
				tempLevel = riskMap.critical.effectedHosts
				break;
			case 'high':
				tempLevel = riskMap.high.effectedHosts
				break;
			case 'medium':
				tempLevel = riskMap.medium.effectedHosts
				break;
			case 'low':
				tempLevel = riskMap.low.effectedHosts
				break;
		}

		return tempLevel.filter((item, index) => index !== tempLevel.indexOf(item));
	}

	// sorted by risk factor overall
	// group CVEs by level (most common view)
	cveArray.sort((a, b) => a.risk > b.risk ? -1 : 1).map(
		item => {
			if (item.risk >= lowFloor && item.risk < lowCeiling) {
				riskMap.low.count++;
				riskMap.low.effectedHosts.push(...item.hosts);
				riskMap.low.items.push(item);
			} else if (item.risk > mediumFloor && item.risk < mediumCeiling) {
				riskMap.medium.count++;
				riskMap.medium.effectedHosts.push(...item.hosts);
				riskMap.medium.items.push(item);
			} else if (item.risk > highFloor && item.risk < highCeiling) {
				riskMap.high.count++;
				riskMap.high.effectedHosts.push(...item.hosts);
				riskMap.high.items.push(item);
			} else if (item.risk > criticalFloor) {
				riskMap.critical.count++;
				riskMap.critical.effectedHosts.push(...item.hosts);
				riskMap.critical.items.push(item);
			}
		}
	);

	// now that we have all the hosts for each level, lets get the common ones
	riskMap.low.commonHosts = getCommonHosts('low');
	riskMap.medium.commonHosts = getCommonHosts('medium');
	riskMap.high.commonHosts = getCommonHosts('high');
	riskMap.critical.commonHosts = getCommonHosts('critical');

	// by identification (Year/CVE/DSS)
	// get all possibilities
	let identificationType = [];
	cveArray.sort((a, b) => a.identifier > b.identifier ? -1 : 1).map(
		item => {
			const parsedYear = item.identifier.slice(0, 8);
			if (!identificationType.includes(parsedYear)) {
				identificationType.push(parsedYear);
			}
		}
	);

	const sortYears = (key) => {
		let array = [];

		cveArray.map(item => {
			if (item.identifier.slice(0, 8) === key) {
				array.push(item);
			}
		});

		return array;
	}

	// putting the items in their correct dynamic slot
	for (let i = 0; i < identificationType.length; i++) {
		identificationMap[identificationType[i]] = sortYears(identificationType[i]);
	}

	/**
	 * OverviewMetricList
	 * Probably can be refactored to be more like IdentificationMetricList
	 * ** const riskMapArray = Object.keys(riskMap).map(key => riskMap[key]).reverse();
	 */
	const OverviewMetricList = React.memo(({ total, hosts, commonHosts }) => {
		return (
			<ul className='metrics-list'>
				<li>
					<p>total</p>
					<span>{total}</span>
				</li>
				<li>
					<p>effected hosts</p>
					<span>{hosts}</span>
				</li>
				<li>
					<p>effected hosts in common</p>
					<span>{commonHosts}</span>
				</li>
			</ul>
		)
	});

	// converting to array (in correct order) for easier looping
	const identificationMapArray = Object.keys(identificationMap).map(key => identificationMap[key]).reverse();

	/**
	 * IdentificationMetricList
	 */
	const IdentificationMetricList = React.memo(({ identification, array }) => {
		const hosts = array[identification].map(item => item.hosts).flat();
		const common = hosts.filter((item, index) => index !== hosts.indexOf(item));

		return (
			<ul className='metrics-list'>
				<li>
					<p>total</p>
					<span>{array[identification].length}</span>
				</li>
				<li>
					<p>effected hosts</p>
					<span>{hosts.length.toLocaleString("en-US")}</span>
				</li>
				<li>
					<p>effected hosts in common</p>
					<span>{common.length.toLocaleString("en-US")}</span>
				</li>
			</ul>
		)
	});

	const simpleTotalBarData = [
		{
			riskLevel: 'low',
			total: riskMap.low.count,
		},
		{
			riskLevel: 'medium',
			total: riskMap.medium.count,
		},
		{
			riskLevel: 'high',
			total: riskMap.high.count,
		},
		{
			riskLevel: 'critical',
			total: riskMap.critical.count,
		}
	];

	console.log('----------------------------------');
	console.log('Risk Mapping: ', riskMap);
	console.log('----------------------------------');
	console.log('Identification Mapping: ', identificationMap);
	console.log('----------------------------------');

	return (
		<div className='main'>
			<header className='topbar'>
				<img src={filter} alt='filter' />
			</header>
			<main className='page'>
				<section className='welcome'>
					<div className='welcome-wrapper'>
						<img src={hub} alt='hub' />
						<h1>CVE Data Hub</h1>
					</div>
				</section>
				<section className='overview'>
					<h2>Overview</h2>
					<div className='overview-metrics-wrapper'>
						<div className='metric-block low'>
							<h3>Low</h3>
							<OverviewMetricList
								total={riskMap.low.count}
								hosts={riskMap.low.effectedHosts.length.toLocaleString("en-US")}
								commonHosts={riskMap.low.commonHosts.length.toLocaleString("en-US")}
							/>
						</div>
						<div className='metric-block medium'>
							<h3>Medium</h3>
							<OverviewMetricList
								total={riskMap.medium.count}
								hosts={riskMap.medium.effectedHosts.length.toLocaleString("en-US")}
								commonHosts={riskMap.medium.commonHosts.length.toLocaleString("en-US")}
							/>
						</div>
						<div className='metric-block high'>
							<h3>High</h3>
							<OverviewMetricList
								total={riskMap.high.count}
								hosts={riskMap.high.effectedHosts.length.toLocaleString("en-US")}
								commonHosts={riskMap.high.commonHosts.length.toLocaleString("en-US")}
							/>
						</div>
						<div className='metric-block critical'>
							<h3>Critical</h3>
							<OverviewMetricList
								total={riskMap.critical.count}
								hosts={riskMap.critical.effectedHosts.length.toLocaleString("en-US")}
								commonHosts={riskMap.critical.commonHosts.length.toLocaleString("en-US")}
							/>
						</div>
					</div>
					<div className='overview-barchart-wrapper'>
						<div>
							<BarChart data={simpleTotalBarData} />
						</div>
					</div>
				</section>
				<section className='identification'>
					<h2>Identification (Year/CVE/DSS)</h2>
					<div className='identification-metrics-wrapper'>
						{identificationType.map((title, index) => (
							<div className='metric-block' key={index}>
								<h3>{title}</h3>
								<IdentificationMetricList identification={index} array={identificationMapArray} />
							</div>
						))
						}
					</div>
				</section>
			</main>
		</div>
	);
}

export default Main;
