import * as React from 'react';
import './CompactList.scss';
import Search from './Search';
import { riskCalculator, riskType } from './Common';

export const CompactList = ({ items, sort, sortType, sortRisk, sortTitle }) => {
	const [filteredQuery, setFilterQuery] = React.useState('');
	const searchResult = data => setFilterQuery(data, filteredQuery);
	const getColor = (risk) => riskType[riskCalculator(risk)];
	const getTitle = () => sortType === 'risk' ? (sort ? 'High to low' : 'Low to high') : (sort ? `Z to A` : 'A to Z');
	const identifiers = items.map(item =>  item.identifier);
	// this data point seems like an arbitrary,
	// random number - outputting as days for now
	const getTime = (seconds) => Math.floor(seconds / (3600 * 24)).toLocaleString("en-US");

	// remove line breaks from start and end
	// and separate by /n
	const sanatizeLinks = (links) => {
		const split = links.trim().split('\n');
		return split.map(link => (
			<li key={link}>
				<a href={link} target='_blank'>{link}</a>
			</li>
		))
	};

	const actionBar = () => {
		return (
			<>
			<div className='action-bar'>
				<button className={sortType === 'risk' ? 'active' : ''} onClick={sortRisk}>toggle risk</button>
				<button className={sortType === 'identifier' ? 'active' : ''} onClick={sortTitle}>toggle name</button>
				<Search items={identifiers} result={searchResult} />
				<div className='count'>{items.length.toLocaleString("en-US")}</div>
			</div>
			<h2>{getTitle()}</h2>
			</>
		);
	}

	return (
		<>
			{actionBar()}
			{filteredQuery &&
				<div className='search-results'>
					<h4>Search results...</h4>
					<p><strong>Host Identification:</strong> {filteredQuery}</p>
				</div>
			}
			<ul className='compact-list-view'>
				{items.map((item, index) => (
					<li className={`compact-list-item ${getColor(item.risk)}`} key={index}>
						<div className='header'>
							<h3>{item.identifier}</h3>
							<p>ID: {item.id}</p>
							<p>Last modified <span>{getTime(item.modified)}</span> days ago</p>
						</div>
						<p className={`risk ${getColor(item.risk)}`}>Risk: {parseFloat(item.risk).toFixed(4)}</p>
						<div className='details-secton'>
							<p className='description'>{item.description}</p>
							<h5>Links</h5>
							<ul className='links'>
								{sanatizeLinks(item.urls)}
							</ul>
							<div className='select-area'>
								<h5>Additional Information</h5>
								<div className='patches'>
									<label>Patches: </label>
									<select>
										{item.patches.map(patch => (<option key={patch} value={patch}>{patch}</option>))}
									</select>
								</div>
								<div className='hosts'>
									<label>Hosts: </label>
									<select>
										{item.hosts.map(host => (<option key={host} value={{ host }}>{host}</option>))}
									</select>
								</div>
							</div>
						</div>
					</li>
				))
				}
			</ul>
		</>
	)
}

export default CompactList;
